/**
 * Result holds a summary of timestamped values generated by the model at one time step
 */
public class Result {
  
  // List of Time Stamps associated with summary data
  private Time time;
  
  // Duration of Time associated with summary data
  private Time step;
  
  // Tally of compartment statuses itemized by pathoge and demographic
  private HashMap<Demographic, HashMap<Pathogen, HashMap<Compartment, Integer>>> compartmentTally;
  
  // Tally of symptom statuses itemized by pathogen and demographic
  private HashMap<Demographic, HashMap<Pathogen, HashMap<Symptom, Integer>>> symptomTally;
  
  // Tally of people hospitalizations itemized by pathogen and demographic
  private HashMap<Demographic, Integer> hospitalized;
  
  // Average Social Encounters Per Demographic
  private HashMap<Demographic, Integer> encounterTally;
  
  // Average Trips Per Demographic
  private HashMap<Demographic, Integer> tripTally;
  
  /**
   * Constructor for Result()
   */
  public Result(CityModel model) {
    
    time = new Time();
    step = new Time();
    compartmentTally = new HashMap<Demographic, HashMap<Pathogen, HashMap<Compartment, Integer>>>();
    symptomTally     = new HashMap<Demographic, HashMap<Pathogen, HashMap<Symptom, Integer>>>();
    hospitalized     = new HashMap<Demographic, Integer>();
    encounterTally   = new HashMap<Demographic, Integer>();
    tripTally        = new HashMap<Demographic, Integer>();
    
    // Initialize tallies with values of zero
    for(Demographic d : Demographic.values()) {
      HashMap<Pathogen, HashMap<Compartment, Integer>> cTally = new HashMap<Pathogen, HashMap<Compartment, Integer>>();
      HashMap<Pathogen, HashMap<Symptom, Integer>>     sTally = new HashMap<Pathogen, HashMap<Symptom, Integer>>();
      for(Pathogen p : model.getPathogens()) {
        HashMap<Compartment, Integer> cT = new HashMap<Compartment, Integer>();
        HashMap<Symptom, Integer>     sT = new HashMap<Symptom, Integer>();
        for(Compartment c : Compartment.values())
          cT.put(c, 0);
        for(Symptom s : Symptom.values())
          sT.put(s, 0);
        cTally.put(p, cT);
        sTally.put(p, sT);
      }
      this.compartmentTally.put(d, cTally);
      this.symptomTally.put(d, sTally);
      this.hospitalized.put(d, 0);
      this.encounterTally.put(d, 0);
      this.tripTally.put(d, 0);
    }
  }
  
  /**
   * Set Time Stamp of model values
   *
   * @param t Time
   */
  public void setTime(Time t) {
    this.time = t;
  }
  
  /**
   * Get Time Stamp of model values
   */
  public Time getTime() {
    return this.time;
  }
  
  /**
   * Set Duration of time that passed to generate these values
   *
   * @param t Time
   */
  public void setTimeStep(Time t) {
    this.step = t;
  }
  
  /**
   * Get Duration of time that passed to generate these values
   */
  public Time getTimeStep() {
    return this.step;
  }
  
  /**
   * Add to Tallies
   *
   * @param p Person
   */
  public void tallyPerson(Person person) {
    for(HashMap.Entry<Pathogen, PathogenEffect> entry : person.getStatusMap().entrySet()) {
      Pathogen pathogen = entry.getKey();
      PathogenEffect pE = entry.getValue();
      Demographic d = person.getDemographic();
      
      Compartment c = pE.getCompartment();
      int cTally = this.compartmentTally.get(d).get(pathogen).get(c);
      this.compartmentTally.get(d).get(pathogen).put(c, cTally+1);
      
      if(person.hospitalized()) {
        int hTally = this.hospitalized.get(d);
        this.hospitalized.put(d, hTally + 1);
      }
      
      for(Symptom s : pE.getCurrentSymptoms()) {
        int sTally = this.symptomTally.get(d).get(pathogen).get(s);
        this.compartmentTally.get(d).get(pathogen).put(c, sTally+1);
      }
    }
  }
  
  public void tallyTrip(Person p) {
    Demographic d = p.getDemographic();
    int tTally = tripTally.get(d);
    tripTally.put(d, tTally + 1);
  }
  
  public void tallyEncounter(Person p1, Person p2) {
    Demographic d1 = p1.getDemographic();
    int p1Tally = tripTally.get(d1);
    tripTally.put(d1, p1Tally + 1);
    
    Demographic d2 = p2.getDemographic();
    int p2Tally = tripTally.get(d1);
    tripTally.put(d2, p2Tally + 1);
  }
}
